{"version":3,"file":"shared.cjs.js","sources":["../src/general.ts","../src/shapeFlags.ts","../src/index.ts"],"sourcesContent":["/**公共方法 */\n// 判断是否为对象\nexport const isObject = (target) =>\n    typeof target === \"object\" && target !== null;//因为 typeof null 也是 \"object\"，需要排除它。\nexport const isArray = Array.isArray;\nexport const isFunction = (val) => typeof val === \"function\";\nexport const isString = (val) => typeof val === \"string\";\nexport const isNumber = (val) => typeof val === \"number\";\n// 合并两个对象\nexport const extend = Object.assign;//直接将 ES 的 Object.assign() 方法赋值为 extend 名称\n  \n// 判断对象是否有某个属性（两个参数，返回值为布尔型，key is keyof typeof val使用了ts的类型守卫语法）\nconst hasOwnProperty = Object.prototype.hasOwnProperty;\n//下面这个函数；函数名是hasOwn，参数是val和key，): key is keyof typeof val =>是箭头函数的返回类型注解；真正的函数体是箭头后面的\nexport const hasOwn = (\n  val: object,\n  key: string | symbol //第二个参数叫key，可以是字符串或Symbol类型\n): key is keyof typeof val => hasOwnProperty.call(val,key);\n//typeof val：获取变量 val 的类型，相当于：name:string;age:number\n//keyof typeof val:表示这个对象类型的所有“键名”组成的联合类型：type KeyType = \"name\" | \"age\";\n//总体意思:如果函数返回true,那我保证这个key就是val对象的一个有效键\n//这里的.call()作用是改变函数执行时候的this指向\n  //例子：const obj = Object.create(null)\n        //obj.name = '李四'\n        //obj.hasOwnProperty('name') // ❌ 报错！\n        //Object.prototype.hasOwnProperty.call(obj, 'name') // ✅ true\n\n\n// 判断数组的key是否是整数\n// 数组经过proxy代理之后，会变成对象的形式，如console.log(new Proxy([1,2,3],{})); ===》Proxy(Array) {'0': 1, '1': 2, '2': 3}（js对象的key类型为字符串），因此\"\" + parseInt(key, 10)这样是为了方便拿到正确的字符串key用于判断\n// console.log(Array.isArray(new Proxy([1,2,3],{})))===》true\n// 比如此时arr[2]=4，应该是\nexport const isIntegerKey = (key) => {\n  isString(key) &&\n    key !== \"NaN\" &&\n    key[0] !== \"-\" &&\n    \"\" + parseInt(key, 10) === key;//只有当 key 是纯数字字符串，并且没有多余字符（如前导零、单位 px、字母等）时，这个表达式才为 true。\n    //parseInt(key, 10)：把 key 转换为整数（忽略后面非数字字符）。\n    //\"\" + ...：把解析出来的数字 转成字符串。\n    //\"\" + parseInt(key, 10)即(比如\"08\"->8->\"8\")\n};\n\n// 判断值是否更新\nexport const hasChange = (value, oldValue) => value !== oldValue;\n\n// 创建map映射关系\nexport function makeMap(\n  str: string, //如\"div,span,p\"\n  expectsLowerCase?: boolean //是否在判断时把传入的key转为小写\n): (key: string) => boolean { //makeMap 这个函数会返回一个函数，这个函数： 接收一个字符串参数 key: string；返回一个布尔值 boolean\n  const set = new Set(str.split(\",\")); //拆分字符串，变成数组（split），然后用Set储存成集合\n  return expectsLowerCase\n    ? (val) => set.has(val.toLowerCase()) //转小写\n    : (val) => set.has(val);\n}\n\n\n\n// 驼峰化\nexport const capitalize = (str) => {\n  // e.g\n  // my-first-name\n  // myFirstName\n  // replace 第二个参数可以是一个函数\n  // 这个函数接收两个参数\n  //      match: 匹配到的子串\n  //      p1,p2,p3...: 假如 replace 第一个参数是正则表达式\n  //                   则代表第 n 个括号匹配到的字符串\n  // 如上例子中\n  // nerverUse 是 -f、-n\n  // c 是 f、n\n  return str.replace(/-(\\w)/g, (neverUse, c) => (c ? c.toUpperCase() : \"\"));\n};\n\n// 这里是一个将 xxx-xx 转化为 onxxxXx 的工具函数\nexport const toHandlerKey = (str) => (str ? `on${capitalize(str)}` : \"\");\n\n","//在vnode.ts生成虚拟DOM节点中，第一个参数 type 不一定为根组件也可能是元素，生成的虚拟 dom 也要据此做出区分。\n//至于怎么区分，源码里面为了精确地获取节点的特性信息的同时提高渲染性能，借助了枚举，每个枚举值都是一个二进制位掩码\n//至于为什么用二进制源码表示，这是因为经过大量的实践证明，二进制表示、位运算可以节省内存空间的同时大大优化对比性能，同时也可以方便组合、提高代码简洁度，可以用于标记虚拟节点的具体类型和特性\n\nexport enum ShapeFlags {\n    ELEMENT = 1, // 表示该虚拟节点是一个普通的 HTML 元素节点\n    FUNCTIONAL_COMPONENT = 1 << 1, // 表示该虚拟节点是一个函数式组件节点\n    STATEFUL_COMPONENT = 1 << 2, // 表示该虚拟节点是一个有状态的组件节点\n    //为 TEXT_CHILDREN 这个标志位分配一个唯一的 二进制位，具体值是 1 左移 3 位\n    TEXT_CHILDREN = 1 << 3, // 表示该虚拟节点包含纯文本子节点\n    ARRAY_CHILDREN = 1 << 4, // 表示该虚拟节点包含数组形式的子节点\n    SLOTS_CHILDREN = 1 << 5, // 表示该虚拟节点包含插槽形式的子节点\n    TELEPORT = 1 << 6, // 表示该虚拟节点是一个传送门（Teleport）节点\n    SUSPENSE = 1 << 7, // 表示该虚拟节点是一个异步加载（Suspense）节点\n    COMPONENT_SHOULD_KEEP_ALIVE = 1 << 8, // 表示该虚拟节点的组件应该被缓存而不是销毁\n    COMPONENT_KEPT_ALIVE = 1 << 9, // 表示该虚拟节点的组件已被缓存\n    COMPONENT = ShapeFlags.STATEFUL_COMPONENT | ShapeFlags.FUNCTIONAL_COMPONENT, // 表示该虚拟节点是一个组件节点，可以是函数式组件或者有状态的组件\n  }\n  \n","export * from \"./general\";\nexport {ShapeFlags} from \"./shapeFlags\";\nimport { ShapeFlags } from './shapeFlags'\nconsole.log(ShapeFlags);\n"],"names":["ShapeFlags"],"mappings":"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"}